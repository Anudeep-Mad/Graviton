Go - Functional language
It has pointers, structs similar to C
Slice is a data structure which points to an array in GO and it shares the same memory. If you update an element using slice as a reference,
it also updates the value in the array.
var arr []int{1,2,3,4,5,6}
slice []int = arr[0:6] -> Slice then refers to the elemets with index 0 to 5 in the array "arr"
Slice has a special property called capacity. So when you refer a slice to an array, the length of the array becomes it capacity. Even, if you 
update the slice to lesser size, you can regain the right bound variable by increasing it's size back with in capacity limits. 

	s := []int{2, 3, 5, 7, 11, 13}
	printSlice(s)

	// Slice the slice to give it zero length.
	s = s[:0]
	printSlice(s)

	// Extend its length.
	s = s[:4]
	printSlice(s)

	// Drop its first two values.
	s = s[2:]
	printSlice(s)
	
	s=s[:4]
	printSlice(s)
  
  OUTPUT : 
    len=6 cap=6 [2 3 5 7 11 13]
    len=0 cap=6 []
    len=4 cap=6 [2 3 5 7]
    len=2 cap=4 [5 7]
    len=4 cap=4 [5 7 11 13]
